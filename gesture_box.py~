from kivy.gesture import GestureDatabase
from kivy.uix.boxlayout import BoxLayout
from kivy.gesture import Gesture 

gesture_strings = {
    'left_to_right_line': 'eNq1mE1y3DYQhfe8iLXRFPofuICyTZUOkFLsKVllR5qSxkl8+zS7ZWWaFYfYaDajeQQf8PUDAVBXD18e/vx+uD++nL89H5dfXr9Pbbn6dILl9sPj3R/HD8sJ/U//ouXl9sPL+fnpy/HFf/Jy9fUky9V/mtxGs+Wkq5X5/aenh8fzeltfbxs/ue3XtdVyghzBOoTvfgvgctMOrQFpgz6odeEm1Nfx/L1ep+Xmuh2MGzJAM8HBXWV5+f3u/7vh6EaW+5/3cP/DvHU1Q0W2gebtd80DHSzNr+3AQm0gNGC3aXS8bvKvvWqXJm1oEzBk3bfvYT8m7QmVrI1GgJ3Jdu0xEkCYtG/aAQEVeus89iuPGPY0Zy8ioAjDBmjX1vftI1iUOXseStTfEoCJ6kS2aO/mH+HiZLiso1kfnYFJWPftKcKlyXAZGoqwsBFYh0H7/pEu0bv5R7w0GS+JzxkRVC+NDb931z7SJXsv+wiXJsMlAJRh0vvwpaftLwwc4fJkuL4aNP/YayPYLz5HuDwZLjLSIOjWjTxb3F8aOMLlyXCxIfo1BGZFvz4x/kiX7d38I16ejNcfWRrGAxuxNBu79hLxCryXfaQrk+m+7bU4RFHH/tIjka5Mpuvbiu+2zafoMCXfBfb9I12ZTNc3WzHxChHjMLS+//RKxCuT8b5NHEH0rdcmFjeNgHUmYPf3w8IAMFITtS77y4NGwEpz9uzLjwJZb6aGfT9fjXxV5uxNwfXmxy1jJtzf2DXiVZuyh8a9DViH7se53vZnj0a4OubsyY9UPvFxLcx6wNq1t4jW5qIFVWnYzISHL6Iz9hGtzUULozeVgb65+PFkYuJbJGtzySIOXxO88MqjC1lMnPXt4ePz8fj49i5gur4M+NWrG6ZDW24Yzb/OJ+vLnWtatLFqCpdab6FJ0WDVxqufpoarBtCLSCEiF5FDJC2ihGhYRF1FhNqRhUhwGJcfu2gRaGj1tmDzel6KI+B8aSpi0NGPMryKgUejFTHwuDKPwPNdoYiBx1J7DzzupToj8AS898uPXrQIPMHaQeAJFy9owedHv6oGoBhUNQilb9pSqqOqwehTsqqS0werGpSKG9VSlaoGmtJmZDktqTpATsw6jQCCTbk6AKZqVaVUKxsk26ZmkGyyaZts2qqabFqrA8mmG99k00qBybZJCJPNas0w2ayyYbL1OjJMtr7xTba+8U22vvFNtrHxTbZR2TDZRnWgZBu9qsFmrfoSplrHS5Rq7Y041U1vkmrNjYLNYNObpVpzo57qpreRaq0Zt1QrGycb1DFwstXH2E+TqdbeONmwzhJONqzEnGy46S3ZNs8QJxttxpBsVNkk2TbPmyQbVWJJNqpjkGTjWnU/r97l1vX5+HD/+bz+t8lPrzdr5i7+9fDp/Dk0XwJzLrl6fvp6fL57/HiMKxbb7aq/bqy/nZ6fPn37mF7dO/NXYD9kNfa5I92P6utWf/gHjU3d+Q==', 'right_to_left_line':'eNq1WNtuIzcMfZ8f2bxUEG+S+APpa4F8QJHuGtlgt4mReNvu35ci5bEMxDt+cWCcSeIzZ2QeiqR89/zt+Z+f6Wn3fvjxtlt+H9d9Xu6+7GF5+PTy+Pfu07JH+9UutLw/fHo/vL1+273bn7zcfd/LcvehyIPTln3pUtXu378+vxz6ba3fphdu+6Ozlj3ECvoSftotgMv9bznlzJmkYBHHLK0v6L9OoOU+J6EMXBkdQZf3vx5//RT2p8jytD6g1IJNFTu2ynV5fwpt1kaoSIG1bov7J4d6EofchFpu1LE2xZM4Q5YiEJhhW7y5uE7iIFNoYNLOx4h0LEyb4ujBR5jE15h0lFpWdSrrsg2lbccF0dXpRupuKU6WAkmzyMfLUuYUGcKzdJFtcbcUZ0sZp3xpsGpjWXPF8JqFu6Oot9AmN5TgmqAgSMmgJZCFt9XdUKIbqbuhJNekC8hZumwXAHJDqV6xjWxXzlvUUmFT3B0lvYk4u6UM11SXLGd5bjVgW949ZbqVvJvKc+FV1gwV1JHpWHj9PTNZmwSSvbut775yvZm+W8u63Tj6ewKl5loCUcq2u+LuyuRuFpqTvq9x1W/ErSkHMm13D3F3ZXL3g8Z6lAda125or215d1fkVvJurszmDlsDRcsUHagV0AaDwIZX6Lu5Mszt8rlaVgyErFakV3nEc3M31YtbW+CkDgxNx0utJ03B8fo2pea2ujtb6EbqbmyRkzr1gaIOrA1xUtdVGsUKxxWhcWNLPcmzDSygUDpihpM40VnOy/ZQU9zVMrkqkrVhy45cyqR+Hpjt/Vrd1DqZui67I1teT+qtWdxIA3sh3VJ3U+vJVNsz09IpT+JMa64bFtquZdVNrSdTQaZ0z9rnolWdzwPjkelngs9vu93LOuFbS7YR32bku3ujJs291Q9c7rG2HgO7BPJy2Ne2PAZZLFFRBgYZGaoNEYHS2RpsTsIIyAMvsFsONlkt4JJp4CU2BBsSQ6ECAzu7JuVWoQ4snY3OBk25YiYNDHLLCFoH9g/ZKMi27NqqcGAJtuVcsT3k6GQOMqaG1kFw4AWyODmXVG0nchnYySXZmGilaaAvunQ2q9qBqc9hA4NdaxEpga2Ta5Bzqsw2zw0swWabByzDHT167iM3YzdgO3o4tiATFdUS6Kt2G7loamy5qoEaZNDMVlYd0cjqLrJY7oANHG3gx8rqJlpdSFaYrd8M/HjN6h4yUTqJENWPw6HuISOmKjbqYGC7EGl1ExksmbCJTRaBYaJ1DoA60BfiLnLOqVUFK9WOl7JJ3UVSTlYmLakGlsjrrJbwLdA2r9HdRzswpGnr0YXtqG6jZViypsFAA4M83d6aS7uPVDidUs/QV6LpdLuhsa2mOF1sr88/HHQ7GVhVDCxOdy+JazruGMeubmmWnYJBsdo6b/FgWAsRP/kaorPdQmsgKRdRu8sRgr0+u2N1unto56wkKo3bwBp8acWPOB1juRJ0tgZYFTnQ1wJptdvR6eEiNHtyBWgDezAapmnjY47ghY1QLEcYqQRq0Nea0NHZ4SOIBcYOZTKws8lGF7JpcaCzw0cw19kShQbWoK97pmOnQ/hoyS3WJOxs41hcne1IY5MuD3Q6HOnHzHbkS3Q80q3d2VA7UC7R6Vd0tPrVeKBHxjbhY/Sur7vnp6+H/h0SGNt2zmxpfMP07/OXw1dn9Kyz+t202GUgdMrh9fvu7fHl885p1Q91/f+j5/65f3v98uNzPKZXi1R65y7UZ3e0lLZGmv4H3GXTZA==', 'down_to_up_line':'eNq1WMtu3EYQvPNHrIuJ7unX9A8o1wD+gEC2F7LgRFpI6yT++9TMkBQNZL0GhNWhVl4Xi8Ounpqmbh6+Pvz9fb4/vJy+PR+m35bPI003n488fXj3ePfX4d10LPgVHzK9fHj3cnp++np4wT91uvnzaNPN/4p86LTp6E0qcP3x6eHx1C6r7bI8c9nvjTUdeaygLeE7LuEy3b6n2dTNqRaV9KjF23L+bf8t0y3NJFKkRAYrCSnr9PLx7ud30X4Xm+7XGxBlVWWvSVSJp5f7RZvFokh1spqVLS9r9wfn2LS1Uo1grLsq17LTJtcirOZuEVLqL4jXLp6v4hYQDVSg18Ztp87kXNgkqHowX1YvvfhY4aouaWFuotUKPNBY1N/3xVOtVIxKEWWufFm+dHl5lbdSnSmLppTEQ+zla8CMJPaM1OJ+Wb6bWuxa8t3X8uprES+STNUiUYpiO3lm1Uwz4SgaYr9QnO5sySvJS7dW+Fry3VqRa8l3a+XVWq7odioQJgnD3XfqaEeB7eIuWYXssnp3Vl6dZXQFJCyNA71B+bbFd2clrySv3Vl9dZZQ91o5qChjAzj2xa7vE1+4WuGawHJZvjurci357qzateS7tfpqbWuPqIbIdA9D7NqbQkG7t7p4CwmsyhGInNRCU/VNgWndWuNVHWv3SoqauGute21RCrKsge8rynS5660ba3Id8W6r2XXEu6kWmzjOPxOpGlwVQvs0gJecoRk4GqtB/fIpaN1TyyvJezfVN1NREhF1juzV+aE2FC0eNEqoGLLhckN6d9XlSurdVt9sLThYjQ0Tk2J6wYSwmz5QGswOJIUDUac4OC+qd19981UMo55mi4HqGI924hilxkiS2KtU4heW3l31vIp4dE9j81QQYEVknH0o8L4ujDrVQMHwa6U+lVxS757G5imC0RAtFoy4MWi8ZeaLbmlslqogo3B4O5Hho8TFbm+vBp+eD4fHbdBHxTDpR0w3t5KJzY9gzQWnW2hisMziMVCn0zHqdNfIMeM0lxbLHR1s4RmRgZNwwdLoOeg611JaPQdqo0Mcq5dYMECvNOgyt8fCpD0QbGXcEO8VvGJj82CXWaO1xoLW6DrjJcBbDHT0Ri8rvVS8hZQFO91nS+SbL9jXIit9V5RCPui1uqov2NV10BmvKBh6eEGwjWe0LgsvKI1tg40XGpwzmH0Ggu1oSgxERANbzaHfyDXnBGDqGNjIObdIqLlgI8dK3qrdEI1RQmbPRMwMHDWsK70P4blgo6dhOETQ24J9KbnSGS8clAvCTyGfff/THjPpnDrSZt4q0rCxeWX/+FC3yPR5q2jDtpQsZ6oiMJ93zdL6MOVMvcV8brvEfGBt5M1K3v+AjAomp7Is2Mh2xnepMVfB4BsLNrKvZAwu3FKrIx5Rieat3xu2nspY6TWRJLwgWlCZ0OAYgKgjN3I9txu0wElivJoP5NYnmed2gwpasOAdlRYEm4nOqkuZ14ToqJ3P53aPYuOTp2UM5MEvZysj6If9Bd75cqbsqljOFipeorP1LBu9glHPdcGxGPsJ3bQwHnygdbr/hO67pIhRyjj7qD/G1hCvayQSXutZFpTG9nkXkqMscHUk/ZfDw/2XU/vTCxM2M9cZUy1ZXbD/oeifh8+nL52C5sY+2qIBiLuDcXr68/B89/jp0FljymrfL0fUH8fnp8/fPo3btMzAXgo0acGOJgzo7W3y4/wfIFqqZw==', 'two_left_to_right_line':' eNq1l0tu2zAQhve8SLypwHlzLuBuC+QARZoYidE2EWz3dfsOx6rjAG2dFuAi40T59ZHiJ0vD1fbj9uuP6X6zP3zZbcrb5XOuZXU3Q7m+erz5vLkqM8av8UFlf321P+yePm728SeX1adZyuq3kOuMlVk7yuL8+Wn7eOintX6a/+G0dz1VZjjOoE/hR5wCWNZ1qmhO2hTN0LGB5Xy+9/9TWb+pEzqjcAURFXaIo/sPN38fh3McKfe/hkAVVXer0sw9ju7vf9EVWA2oErg0R75Mz4sHexWdqtS4pKbeWGvFy/SWdH8NPWdMJN5i8Zq0dpGOaQDhRIfGhKKOgsgAaGf083Uh0stwTDg9wwkEuSo0gVCr+gyvLUT6afFfsTCYUlEG0VMqLlI7onpFRgtzyjV+fMHHwlRlY2nQGjOYX75lMKWij6FTSiUYRE+rRIPoaZVkED2t0iCrlFbpzCqqmzYiQKb40iOe6ETWagyMxyeCX4RzSmUYA0+nTGPgqZRlDDyNso2Bp1AeI1RSqIwRKilUxgiVFCpnQuM9Ga8csXgCCzPpiR0vqfgOxbuOiSVil9npU2wIO3WKj2Br2lQYwk6ZSkPY6VKHuNR0qUNcarrUIS4tXdoQl5YubYhLS5f2vy5713+722weTz28aW/izcpqHb3g1NyYZKla1tF9R8sZzw6lrFwOs7Vy09MyyVk8w23iGM8Js1IP+zHsU0yzCizVjulao78FPNZIt5pp1CkaVIa61D+EIcPE0zO3RZ/7+zBmmGWC84lwT1sA4nlpx9rDlGHxF+vhOWmZmrboQ4/Ve5p7WipOIBQt/1Kpp+vUjDB2AVmhpyXTwi8usYdJp4ZusR/JKj2s/xK2Hlayl5cYYcTJXKPPgay5HiHxeEM8bLb3D4e+nfOyjpWPbRerYFaIp3REvm3vDg+R8BoJlL7Fsdg/LLUnDk+fNrubx9u+x3TI3qofXm7i9/Pu6e7LbR/EQ2ZMnUKLQrXqRrXfmtNPW+PUXQ==', 'two_right_to_left_line':'eNq1l91uGjEQhe/9IuEmlj32/L1AelspD1DRBBGUFlZA2ubtOzO7oZH6g1TJN2eBPT6e9YfWntXuefftNW83p/PLcZM+LNeppNXjVNP9zX79dXOTJrCPdmnpdH9zOh8Pz5uTfe1p9WXCtPpjyH3Y0kQexTZ+Ouz2Zx8mPkz/Muyju9JU5wq8hFcbUiHdlVyAmGut0AWbSo9yfvjt5rehl1qxL1pB0unz+t+z9JgF0/ZtgqK1a6sECpWpW8R2CS/MChcVuh4eT175Eu5lYekAqA2kKV/CK3MXvSjq9XCJcJ3Dby29NJJagJWIu1f4Lr4QC7wpY7saD7H8UEfFQ8S3X/GtshZSKrboRaUt4be+8NS6vikSXE8PqoCD0gMr8KD04Ao6Jr0F1lYHpQfVNohqC6ptENUWVNsgqi2otkFUe1Dtg6j2oNrfUbUXJCo0od4VwSPe0u3NJdJxUX9FXAsPqB3HhAfTzmPCA2nXIeEYRLGOCQ+gOAYoBlAcAxQDKI4BigEUxwClAEpjgFIApTFAKYDSGKAUQGkMUAqgNAYoB1AeA5QDKI8BygGU/xuodwAPx81mfznPM/mBnjmt7mqVmrFJpzorp7tOkAWlVqVZ03liSetwl9xsk7LZQ2F2E9hJXxZ1t85u7lm5N5RQdXPNROKVL2puKbObJIttcdYHhHolqJmJbNuri7q9znbs+VK1KbmdMnFThVnZ3RDuoiUL2y7bQ9HNJdsDonUooeLm5mZl+S25c7bzvxSooeDmntbz8j5tdtunszdKllvRBvuGvqhBM8v33eP5yR0WBqXld2topzsznA9fNsf1/sGbN+Pmp3T/eflLfJqOh8eXh5hDbI6SDb2qlSeNSJs3N/knHg2zIA==', 'two_down_to_up_line':'eNq1V9tuIzcMfZ8fSV4qiHfxB9zXAvmAIk2MxNhtYtjetvv3pTj2zBSt6xbGzAN9maMjiocSqcfdl91v38vb9nj6dtgOP54/93V4fN3D8PTw8fzr9mHYY3yNDxqOTw/H0+Hzy/YYP3l4/LqX4fEfSZ4SNuy1U1mM33/uPk59WOvD/Mqwnzpq2MPoQXfhewwBHDY/1CKVyBuxgJAqa3fnj/6a8nUFk8ZNtTq2VoltOP7y/O/zcM4jw9t5CiZGdq5tnGc4vl3Ia2OoMTFxMzUnuU2eawdbh7wluU/kpGZaKxs2ICReslNDNFcPboAA3A4MpgAIa9Fj0tNMjygX7ghBO9N39mrKIk4uxIpC/4E9VcVZ1fDO57gL8oJeSMBBwneuVRvdZk9Z0VZiT11x1hW5whz3iM2C3SMqaAjkLJH3epOdUlaaZYWmPnlOKjM5sKAqNgEQiLTE2+QpKtE65KkpzZpC5UgHsHFDLcMSAY+IxEnQSAyqtdvkKSnZOuSpKM2KxuprP7+oYt9RDReBQbIKxIAiGso2vknPKSnDWvQpKtNa9Ckrn2WNwMdWJwvSKh4noutd5Ckr2zrkKSv7KuSSogqsQ56SCq1DnoLKJChWtRrFOPm10j07SVJPsVW4U06Z5CT0SG5WIonCxiT3HOqaciqsQ55yKq1DnnKqrEOeeuqkJ5nLRc5IRbmzydCUVH0lektRbRKVMQpxhoU8ehWhu/o7S1VtUjXKUUWLimoKiC66YP//fa+lrDbJyk1cZ+dxQR6rMoyHtRdDqNlk9HvAy2G7/Zi6+qiR0dabDY8bh1YyN1pah2FD8VcvFeQ6WhlO+9iVzx3thSKjIjppJdAIpXrzmC1tdOmB9gvaPKIIo/WO5qKLxwLcaoKxnxEC2EYbKyKqJQLojGfbwXABT06EbR0czKIhHZ5tR+OIDhdxftfXSG1USdtoE00X9BSP7Cc2cRUIAjdHHm0H8wW8iAf1JbIWaxodIIw23ZYRjWXhR+VACxfQOAOj5+o2qfUC/muoNqQxng2o6mipo+0a2rQINHD00XZwu+ZHg+ItEl4tbUtH/Fr4HEsQem8N0wbYr8roVpijuewXqm4TDVcyJNK29OtFbMPRdkd81PHvucqVS+v5rjzaDqYLeJkO3MFaYudEgbTR9vA5X9CLfNKktjIvED1TxEPHcUu9b3dv76fYTFGCN80jZcA9anDaftn9ffd6eu/vQwouc0SiEIY6ATh9ft0enj9e+qXdWxb3/vf5EPh5f/h8/faSM0RYsDSt2KKVi1IpkYT9VCp/AgYRGpc=','two_up_to_down_line':' eNq1l9tuGjEURd/9I+Glln2u9g/Q10r5gIokowSlhRGQtvn72meuvZJWMjraE2B72+NF4Hizf95/efWP3fnycurc+/HaB7d56KO7vTnsPnc3rofyZ7mgO9/enC+n43N3Lk/JbT717Da/Dbk1m+ulRmkZ3x/3h0sdluqw/IdhH6rL9XFYQV3CaxkSwW2Dx0C8FEpdzbf6Lrrtu+BDFF5Klcmd73Z/n4ZsGnaPwwwgmFcF6s6Pc3rmuSBwuh5utx51Co85CS0VZB3+70tPlp7bpIPtP8Q5Xcp+T8U5/rAxyEtRxuvhYOE4h0fGpahAWYUHXipCnfhaujEFbpRuUGGGGoR1VQir9KC8VMK37IxBhRFqzcD1g+I6PfJSoETXqaJRxdgq3rgitoo3sMhzfAQWnUt4jP9550XewBWNK2qbcMOKuUk4GVRaoAJTWBXrkg7AS0UpH+ar6caUsFG6ISVulG5MSRulG1RaoEpmWkpoCef1g+g6UzamHJtkG1HGJtnGk7lJttFkbZJtLLkJSzGW0oSlGEtpwlKMpTRhKcZSmrAUYylNWKqx1CYs1VhqE5ZqLPV/Wdau//7UdYe5h1epTbyq22xLR+gFKUMYVdwWATwSlcuk7tJrcrvBTphZwqha7DF7DWVNedTqzpP7l/DIvnx3J+VJiz2FyZ4wQAqjmh18Fg0Io9a1pDjYY/nmZ6E4Kld77VtEMJhWL0xegFgal1GrN4hPEWOSUasbJ7fEqOWnZFCs7nKEmYNDsHXQ4IbSv2sKMGhhVJbpkVNWGlWqmwc3+qhUGvFBqztJbR0QZNDqlcHLHgG5dqamZR3A6iFlVB3U7lHdbgD91O0fny71mJbctowuv5O5nLZGrUeur/uHy1M1ZLclnxKVWxm1/EcXw+X4qTvtDvf15JiD9eD15fGj+bE/HR9e7usUObqteoJyoEjMKCmleqq7898BcYbKgA=='

}

#This database can compare gestures the user makes to its stored gestures 
#and tell us if the user input matches any of them.
gestures = GestureDatabase()
for name, gesture_string in gesture_strings.items():
    gesture = gestures.str_to_gesture(gesture_string)
    gesture.name = name
    gestures.add_gesture(gesture)

class GestureBox(BoxLayout):

	def __init__(self, **kwargs):
		for name in gesture_strings:
			self.register_event_type('on_{}'.format(name))
		super(GestureBox, self).__init__(**kwargs)

	def on_left_to_right_line(self):
		pass
	def on_right_to_left_line(self):
		pass
	def on_down_to_up_line(self):
		pass
	def on_two_left_to_right_line(self):
		pass
	def on_two_right_to_left_line(self):
		pass
	def on_two_down_to_up_line(self):
		pass
	def on_two_up_to_down_line(self):
		pass
	'''To recognize a gesture, you'll need to start recording each individual event in the
	touch_down handler, add the data points for each call to touch move, and then do the
	gesture calculations when all data points have been received in the touch up handler.'''

	def on_touch_down(self, touch):
		#create an user defined variable and add the touch coordinates 
		touch.ud['gesture_path'] = [(touch.x, touch.y)]    
		super(GestureBox, self).on_touch_down(touch)

	def on_touch_move(self, touch):
		try:
			touch.ud['gesture_path'].append((touch.x, touch.y))
		except:
			print "gesture not found"
			#continue
		super(GestureBox, self).on_touch_move(touch)

	def on_touch_up(self, touch):
		try:
			if 'gesture_path' in touch.ud:
				#create a gesture object
				gesture = Gesture()    
				#add the movement coordinates 
				gesture.add_stroke(touch.ud['gesture_path'])
				#normalize so thwu willtolerate size variations
				gesture.normalize()
				#minscore to be attained for a match to be true
				match = gestures.find(gesture, minscore=0.3)
				if match:
					#print("{} happened".format(match[1].name))
					self.dispatch('on_{}'.format(match[1].name))
				else:
					pass #print "Nothing to see Here"
		except:
			print "gesture not found"

		super(GestureBox, self).on_touch_up(touch)






